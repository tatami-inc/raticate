// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// parse
SEXP parse(Rcpp::RObject seed);
RcppExport SEXP _raticate_tests_parse(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(parse(seed));
    return rcpp_result_gen;
END_RCPP
}
// nrow
int nrow(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_nrow(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(nrow(parsed));
    return rcpp_result_gen;
END_RCPP
}
// ncol
int ncol(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_ncol(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(ncol(parsed));
    return rcpp_result_gen;
END_RCPP
}
// myopic_dense_full
Rcpp::List myopic_dense_full(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx);
RcppExport SEXP _raticate_tests_myopic_dense_full(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_dense_full(parsed, row, idx));
    return rcpp_result_gen;
END_RCPP
}
// oracular_dense_full
Rcpp::List oracular_dense_full(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx);
RcppExport SEXP _raticate_tests_oracular_dense_full(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_dense_full(parsed, row, idx));
    return rcpp_result_gen;
END_RCPP
}
// myopic_dense_block
Rcpp::List myopic_dense_block(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, int first, int len);
RcppExport SEXP _raticate_tests_myopic_dense_block(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP firstSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_dense_block(parsed, row, idx, first, len));
    return rcpp_result_gen;
END_RCPP
}
// oracular_dense_block
Rcpp::List oracular_dense_block(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, int first, int len);
RcppExport SEXP _raticate_tests_oracular_dense_block(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP firstSEXP, SEXP lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_dense_block(parsed, row, idx, first, len));
    return rcpp_result_gen;
END_RCPP
}
// myopic_dense_indexed
Rcpp::List myopic_dense_indexed(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, Rcpp::IntegerVector subset);
RcppExport SEXP _raticate_tests_myopic_dense_indexed(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subset(subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_dense_indexed(parsed, row, idx, subset));
    return rcpp_result_gen;
END_RCPP
}
// oracular_dense_indexed
Rcpp::List oracular_dense_indexed(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, Rcpp::IntegerVector subset);
RcppExport SEXP _raticate_tests_oracular_dense_indexed(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP subsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subset(subsetSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_dense_indexed(parsed, row, idx, subset));
    return rcpp_result_gen;
END_RCPP
}
// myopic_sparse_full
Rcpp::List myopic_sparse_full(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_myopic_sparse_full(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_sparse_full(parsed, row, idx, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}
// oracular_sparse_full
Rcpp::List oracular_sparse_full(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_oracular_sparse_full(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_sparse_full(parsed, row, idx, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}
// myopic_sparse_block
Rcpp::List myopic_sparse_block(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, int first, int len, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_myopic_sparse_block(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP firstSEXP, SEXP lenSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_sparse_block(parsed, row, idx, first, len, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}
// oracular_sparse_block
Rcpp::List oracular_sparse_block(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, int first, int len, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_oracular_sparse_block(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP firstSEXP, SEXP lenSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type len(lenSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_sparse_block(parsed, row, idx, first, len, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}
// myopic_sparse_indexed
Rcpp::List myopic_sparse_indexed(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, Rcpp::IntegerVector subset, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_myopic_sparse_indexed(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP subsetSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subset(subsetSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(myopic_sparse_indexed(parsed, row, idx, subset, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}
// oracular_sparse_indexed
Rcpp::List oracular_sparse_indexed(Rcpp::RObject parsed, bool row, Rcpp::IntegerVector idx, Rcpp::IntegerVector subset, bool needs_value, bool needs_index);
RcppExport SEXP _raticate_tests_oracular_sparse_indexed(SEXP parsedSEXP, SEXP rowSEXP, SEXP idxSEXP, SEXP subsetSEXP, SEXP needs_valueSEXP, SEXP needs_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< bool >::type row(rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type subset(subsetSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_value(needs_valueSEXP);
    Rcpp::traits::input_parameter< bool >::type needs_index(needs_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(oracular_sparse_indexed(parsed, row, idx, subset, needs_value, needs_index));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_raticate_tests_parse", (DL_FUNC) &_raticate_tests_parse, 1},
    {"_raticate_tests_nrow", (DL_FUNC) &_raticate_tests_nrow, 1},
    {"_raticate_tests_ncol", (DL_FUNC) &_raticate_tests_ncol, 1},
    {"_raticate_tests_myopic_dense_full", (DL_FUNC) &_raticate_tests_myopic_dense_full, 3},
    {"_raticate_tests_oracular_dense_full", (DL_FUNC) &_raticate_tests_oracular_dense_full, 3},
    {"_raticate_tests_myopic_dense_block", (DL_FUNC) &_raticate_tests_myopic_dense_block, 5},
    {"_raticate_tests_oracular_dense_block", (DL_FUNC) &_raticate_tests_oracular_dense_block, 5},
    {"_raticate_tests_myopic_dense_indexed", (DL_FUNC) &_raticate_tests_myopic_dense_indexed, 4},
    {"_raticate_tests_oracular_dense_indexed", (DL_FUNC) &_raticate_tests_oracular_dense_indexed, 4},
    {"_raticate_tests_myopic_sparse_full", (DL_FUNC) &_raticate_tests_myopic_sparse_full, 5},
    {"_raticate_tests_oracular_sparse_full", (DL_FUNC) &_raticate_tests_oracular_sparse_full, 5},
    {"_raticate_tests_myopic_sparse_block", (DL_FUNC) &_raticate_tests_myopic_sparse_block, 7},
    {"_raticate_tests_oracular_sparse_block", (DL_FUNC) &_raticate_tests_oracular_sparse_block, 7},
    {"_raticate_tests_myopic_sparse_indexed", (DL_FUNC) &_raticate_tests_myopic_sparse_indexed, 6},
    {"_raticate_tests_oracular_sparse_indexed", (DL_FUNC) &_raticate_tests_oracular_sparse_indexed, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_raticate_tests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
