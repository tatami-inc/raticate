// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// parse
SEXP parse(Rcpp::RObject seed);
RcppExport SEXP _raticate_tests_parse(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(parse(seed));
    return rcpp_result_gen;
END_RCPP
}
// nrow
int nrow(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_nrow(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(nrow(parsed));
    return rcpp_result_gen;
END_RCPP
}
// ncol
int ncol(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_ncol(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(ncol(parsed));
    return rcpp_result_gen;
END_RCPP
}
// row
Rcpp::NumericVector row(Rcpp::RObject parsed, int i);
RcppExport SEXP _raticate_tests_row(SEXP parsedSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(row(parsed, i));
    return rcpp_result_gen;
END_RCPP
}
// row_subset
Rcpp::NumericVector row_subset(Rcpp::RObject parsed, int i, int first, int last);
RcppExport SEXP _raticate_tests_row_subset(SEXP parsedSEXP, SEXP iSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(row_subset(parsed, i, first, last));
    return rcpp_result_gen;
END_RCPP
}
// column
Rcpp::NumericVector column(Rcpp::RObject parsed, int i);
RcppExport SEXP _raticate_tests_column(SEXP parsedSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(column(parsed, i));
    return rcpp_result_gen;
END_RCPP
}
// column_subset
Rcpp::NumericVector column_subset(Rcpp::RObject parsed, int i, int first, int last);
RcppExport SEXP _raticate_tests_column_subset(SEXP parsedSEXP, SEXP iSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(column_subset(parsed, i, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sparse_row
Rcpp::List sparse_row(Rcpp::RObject parsed, int i);
RcppExport SEXP _raticate_tests_sparse_row(SEXP parsedSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_row(parsed, i));
    return rcpp_result_gen;
END_RCPP
}
// sparse_row_subset
Rcpp::List sparse_row_subset(Rcpp::RObject parsed, int i, int first, int last);
RcppExport SEXP _raticate_tests_sparse_row_subset(SEXP parsedSEXP, SEXP iSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_row_subset(parsed, i, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sparse_column
Rcpp::List sparse_column(Rcpp::RObject parsed, int i);
RcppExport SEXP _raticate_tests_sparse_column(SEXP parsedSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_column(parsed, i));
    return rcpp_result_gen;
END_RCPP
}
// sparse_column_subset
Rcpp::List sparse_column_subset(Rcpp::RObject parsed, int i, int first, int last);
RcppExport SEXP _raticate_tests_sparse_column_subset(SEXP parsedSEXP, SEXP iSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_column_subset(parsed, i, first, last));
    return rcpp_result_gen;
END_RCPP
}
// rows
Rcpp::List rows(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_rows(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(rows(parsed));
    return rcpp_result_gen;
END_RCPP
}
// rows_subset
Rcpp::List rows_subset(Rcpp::RObject parsed, int first, int last);
RcppExport SEXP _raticate_tests_rows_subset(SEXP parsedSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(rows_subset(parsed, first, last));
    return rcpp_result_gen;
END_RCPP
}
// columns
Rcpp::List columns(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_columns(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(columns(parsed));
    return rcpp_result_gen;
END_RCPP
}
// columns_subset
Rcpp::List columns_subset(Rcpp::RObject parsed, int first, int last);
RcppExport SEXP _raticate_tests_columns_subset(SEXP parsedSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(columns_subset(parsed, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sparse_rows
Rcpp::List sparse_rows(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_sparse_rows(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_rows(parsed));
    return rcpp_result_gen;
END_RCPP
}
// sparse_rows_subset
Rcpp::List sparse_rows_subset(Rcpp::RObject parsed, int first, int last);
RcppExport SEXP _raticate_tests_sparse_rows_subset(SEXP parsedSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_rows_subset(parsed, first, last));
    return rcpp_result_gen;
END_RCPP
}
// sparse_columns
Rcpp::List sparse_columns(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_sparse_columns(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_columns(parsed));
    return rcpp_result_gen;
END_RCPP
}
// sparse_columns_subset
Rcpp::List sparse_columns_subset(Rcpp::RObject parsed, int first, int last);
RcppExport SEXP _raticate_tests_sparse_columns_subset(SEXP parsedSEXP, SEXP firstSEXP, SEXP lastSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< int >::type first(firstSEXP);
    Rcpp::traits::input_parameter< int >::type last(lastSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_columns_subset(parsed, first, last));
    return rcpp_result_gen;
END_RCPP
}
// rowsums
Rcpp::NumericVector rowsums(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_rowsums(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsums(parsed));
    return rcpp_result_gen;
END_RCPP
}
// rowsums_manual
Rcpp::NumericVector rowsums_manual(Rcpp::RObject parsed);
RcppExport SEXP _raticate_tests_rowsums_manual(SEXP parsedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    rcpp_result_gen = Rcpp::wrap(rowsums_manual(parsed));
    return rcpp_result_gen;
END_RCPP
}
// dense_rows_guided
Rcpp::List dense_rows_guided(Rcpp::RObject parsed, Rcpp::IntegerVector targets);
RcppExport SEXP _raticate_tests_dense_rows_guided(SEXP parsedSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_rows_guided(parsed, targets));
    return rcpp_result_gen;
END_RCPP
}
// dense_columns_guided
Rcpp::List dense_columns_guided(Rcpp::RObject parsed, Rcpp::IntegerVector targets);
RcppExport SEXP _raticate_tests_dense_columns_guided(SEXP parsedSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(dense_columns_guided(parsed, targets));
    return rcpp_result_gen;
END_RCPP
}
// sparse_rows_guided
Rcpp::List sparse_rows_guided(Rcpp::RObject parsed, Rcpp::IntegerVector targets);
RcppExport SEXP _raticate_tests_sparse_rows_guided(SEXP parsedSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_rows_guided(parsed, targets));
    return rcpp_result_gen;
END_RCPP
}
// sparse_columns_guided
Rcpp::List sparse_columns_guided(Rcpp::RObject parsed, Rcpp::IntegerVector targets);
RcppExport SEXP _raticate_tests_sparse_columns_guided(SEXP parsedSEXP, SEXP targetsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type parsed(parsedSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type targets(targetsSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_columns_guided(parsed, targets));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_raticate_tests_parse", (DL_FUNC) &_raticate_tests_parse, 1},
    {"_raticate_tests_nrow", (DL_FUNC) &_raticate_tests_nrow, 1},
    {"_raticate_tests_ncol", (DL_FUNC) &_raticate_tests_ncol, 1},
    {"_raticate_tests_row", (DL_FUNC) &_raticate_tests_row, 2},
    {"_raticate_tests_row_subset", (DL_FUNC) &_raticate_tests_row_subset, 4},
    {"_raticate_tests_column", (DL_FUNC) &_raticate_tests_column, 2},
    {"_raticate_tests_column_subset", (DL_FUNC) &_raticate_tests_column_subset, 4},
    {"_raticate_tests_sparse_row", (DL_FUNC) &_raticate_tests_sparse_row, 2},
    {"_raticate_tests_sparse_row_subset", (DL_FUNC) &_raticate_tests_sparse_row_subset, 4},
    {"_raticate_tests_sparse_column", (DL_FUNC) &_raticate_tests_sparse_column, 2},
    {"_raticate_tests_sparse_column_subset", (DL_FUNC) &_raticate_tests_sparse_column_subset, 4},
    {"_raticate_tests_rows", (DL_FUNC) &_raticate_tests_rows, 1},
    {"_raticate_tests_rows_subset", (DL_FUNC) &_raticate_tests_rows_subset, 3},
    {"_raticate_tests_columns", (DL_FUNC) &_raticate_tests_columns, 1},
    {"_raticate_tests_columns_subset", (DL_FUNC) &_raticate_tests_columns_subset, 3},
    {"_raticate_tests_sparse_rows", (DL_FUNC) &_raticate_tests_sparse_rows, 1},
    {"_raticate_tests_sparse_rows_subset", (DL_FUNC) &_raticate_tests_sparse_rows_subset, 3},
    {"_raticate_tests_sparse_columns", (DL_FUNC) &_raticate_tests_sparse_columns, 1},
    {"_raticate_tests_sparse_columns_subset", (DL_FUNC) &_raticate_tests_sparse_columns_subset, 3},
    {"_raticate_tests_rowsums", (DL_FUNC) &_raticate_tests_rowsums, 1},
    {"_raticate_tests_rowsums_manual", (DL_FUNC) &_raticate_tests_rowsums_manual, 1},
    {"_raticate_tests_dense_rows_guided", (DL_FUNC) &_raticate_tests_dense_rows_guided, 2},
    {"_raticate_tests_dense_columns_guided", (DL_FUNC) &_raticate_tests_dense_columns_guided, 2},
    {"_raticate_tests_sparse_rows_guided", (DL_FUNC) &_raticate_tests_sparse_rows_guided, 2},
    {"_raticate_tests_sparse_columns_guided", (DL_FUNC) &_raticate_tests_sparse_columns_guided, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_raticate_tests(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
